name: CI/CD Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      db:
        image: postgres:16
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: askdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Set environment variables
        run: |
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> $GITHUB_ENV
          echo "DATABASE_URL=postgresql://postgres:${{ secrets.POSTGRES_PASSWORD }}@localhost/askdb" >> $GITHUB_ENV
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> $GITHUB_ENV
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> $GITHUB_ENV
          echo "PGADMIN_DEFAULT_EMAIL=${{ secrets.PGADMIN_DEFAULT_EMAIL }}" >> $GITHUB_ENV
          echo "PGADMIN_DEFAULT_PASSWORD=${{ secrets.PGADMIN_DEFAULT_PASSWORD }}" >> $GITHUB_ENV

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Run tests
        env:
          DATABASE_URL: "sqlite:///:memory:"
          OPENAI_API_KEY: "sk-test-API-key"
        run: pytest

      - name: Build Docker image
        run: docker build -t askmeapp .

      - name: Docker Compose up
        run: docker-compose up -d

      - name: Run migrations
        run: docker-compose exec -T web alembic upgrade head

      - name: Deploy to production (dummy step)
        if: github.ref == 'refs/heads/master'
        run: echo "Deploying to production..."


#name: CI/CD Pipeline
#
#on:
#  push:
#    branches:
#      - master
#  pull_request:
#    branches:
#      - master
#
#jobs:
#  build:
#    runs-on: ubuntu-latest
#
#    services:
#      db:
#        image: postgres:16
#        ports:
#          - 5432:5432
#        env:
#          POSTGRES_USER: postgres
#          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
#          POSTGRES_DB: askdb
#        options: >-
#          --health-cmd pg_isready
#          --health-interval 10s
#          --health-timeout 5s
#          --health-retries 5
#
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v2
#
#      - name: Set up Python
#        uses: actions/setup-python@v2
#        with:
#          python-version: 3.11
#
#      - name: Install dependencies
#        run: |
#          python -m pip install --upgrade pip
#          pip install -r requirements.txt
#
#      - name: Set environment variables
#        run: |
#          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> $GITHUB_ENV
#          echo "DATABASE_URL=postgresql://postgres:${{ secrets.POSTGRES_PASSWORD }}@localhost/askdb" >> $GITHUB_ENV
#          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> $GITHUB_ENV
#          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> $GITHUB_ENV
#          echo "PGADMIN_DEFAULT_EMAIL=${{ secrets.PGADMIN_DEFAULT_EMAIL }}" >> $GITHUB_ENV
#          echo "PGADMIN_DEFAULT_PASSWORD=${{ secrets.PGADMIN_DEFAULT_PASSWORD }}" >> $GITHUB_ENV
#
#
#
#      - name: Install Docker Compose
#        run: |
#          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
#          sudo chmod +x /usr/local/bin/docker-compose
#
#      - name: Run tests
#        env:
#          DATABASE_URL: "sqlite:///:memory:"
#          OPENAI_API_KEY: "sk-test-API-key"
#        run: pytest
#
#      - name: Build Docker image
#        run: docker build -t askmeapp .
#
#      - name: Docker Compose up
#        run: docker-compose up -d
#
#      - name: Run migrations
#        run: docker-compose exec web flask db upgrade
#
#      - name: Deploy to production (dummy step)
#        if: github.ref == 'refs/heads/master'
#        run: echo "Deploying to production..."
